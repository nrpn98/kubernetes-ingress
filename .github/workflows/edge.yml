name: Continuous Integration

on:
  push:
    branches:
      - '**'
      # - 'master'
  pull_request:
    branches:
      - master
    types:
      - opened
      - reopened
      - synchronize
      - closed

defaults:
  run:
    shell: bash

env:
  DOCKER_BUILDKIT: 1
  GOLANG_VERSION: 1.14
  PYTHON_VERSION: 3.8
  K8S_TIMEOUT: 1m
  HELM_CHART_DIR: deployments/helm-chart
  HELM_CHART_VERSION: 0.0.0-edge

jobs:

  binary:
    name: Build Binary
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Build Binary
        run: make binary BUILD_IN_CONTAINER=0
        env:
          GOFLAGS: '-mod=vendor -gcflags=-trimpath=${{ github.workspace }} -asmflags=-trimpath=${{ github.workspace }}'
      - name: Upload Binary
        uses: actions/upload-artifact@v2
        with:
          name: nginx-ingress
          path: ${{ github.workspace }}/nginx-ingress

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Setup Golang Environment
        uses: actions/setup-go@v2
        with:
          go-version: '${{ env.GOLANG_VERSION }}'
      - name: Run Tests
        run: go test ./...

  build:
    name: Build Docker Images
    runs-on: ${{ matrix.os }}
    needs: [binary, unit-tests]
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            file: build/Dockerfile
            path: '.'
            target: local
            image: nginx-ingress
            type: oss
          - os: ubuntu-18.04
            file: build/DockerfileForAlpine
            path: '.'
            target: local
            image: nginx-ingress-alpine
            type: oss
          - os: ubuntu-18.04
            file: build/DockerfileForPlus
            path: '.'
            target: local
            image: nginx-plus-ingress
            type: plus
          - os: ubuntu-18.04
            file: build/DockerfileWithOpentracing
            path: '.'
            target: local
            image: nginx-ingress-opentracing
            type: oss
          - os: ubuntu-18.04
            file: build/DockerfileWithOpentracingForPlus
            path: '.'
            target: local
            image: nginx-plus-ingress-opentracing
            type: plus
          - os: ubuntu-18.04
            file: build/openshift/Dockerfile
            path: '.'
            target: local
            image: nginx-ingress-openshift
            type: oss
          - os: ubuntu-18.04
            file: build/openshift/DockerfileForPlus
            path: '.'
            target: local
            image: nginx-plus-ingress-openshift
            type: plus
          - os: ubuntu-18.04
            file: build/appprotect/DockerfileWithAppProtectForPlus
            path: '.'
            target: local
            image: nginx-plus-ingress-ap
            type: plus-ap
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Retrieve Binary
        uses: actions/download-artifact@v2
        with:
          name: nginx-ingress
          path: ${{ github.workspace }}/nginx-ingress
      - name: Fetch N+ Certificates
        if: matrix.type == 'plus'
        env:
          CRT: ${{ secrets.NGINX_CRT }}
          KEY: ${{ secrets.NGINX_KEY }}
        run: |
          echo "${CRT}" | base64 --decode > nginx-repo.crt
          echo "${KEY}" | base64 --decode > nginx-repo.key
      - name: Fetch N+ AppProtect Certificates
        if: matrix.type == 'plus-ap'
        env:
          CRT: ${{ secrets.NGINX_AP_CRT }}
          KEY: ${{ secrets.NGINX_AP_KEY }}
        run: |
          echo "${CRT}" | base64 --decode > nginx-repo.crt
          echo "${KEY}" | base64 --decode > nginx-repo.key
      - name: Build Docker Image ${{ matrix.image }}
        uses: docker/build-push-action@v1
        with:
          repository: ${{ matrix.image }}
          dockerfile: ${{ matrix.file }}
          path: ${{ matrix.path }}
          target: ${{ matrix.target }}
          tag_with_sha: true
          push: false

  smoke-tests:
    name: Smoke Tests
    runs-on: ${{ matrix.os }}
    needs: [build, binary, unit-tests]
    # if: 
    #   github.event.pull_request.opened || 
    #   github.event.pull_request.merged
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            path: build
            file: Dockerfile
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: 'ingresses'
            type: oss
          - os: ubuntu-18.04
            path: build
            file: Dockerfile
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: 'vsr'
            type: oss
          - os: ubuntu-18.04
            path: build
            file: Dockerfile
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: 'vs'
            type: oss
          - os: ubuntu-18.04
            path: build
            file: Dockerfile
            image: nginx-ingress
            tag: ${{ github.sha }}
            marker: 'policies'
            type: oss
          - os: ubuntu-18.04
            path: build
            file: DockerfileForPlus
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: 'ingresses'
            type: plus
          - os: ubuntu-18.04
            path: build
            file: DockerfileForPlus
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: 'vsr'
            type: plus
          - os: ubuntu-18.04
            path: build
            file: DockerfileForPlus
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: 'vs'
            type: plus
          - os: ubuntu-18.04
            path: build
            file: DockerfileForPlus
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            marker: 'policies'
            type: plus
          - os: ubuntu-18.04
            path: build/appprotect
            file: DockerfileWithAppProtectForPlus
            image: nginx-plus-ingress
            tag: ${{ github.sha }}-ap
            marker: 'appprotect'
            type: plus-ap
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch N+ Certificates
        if: matrix.type == 'plus'
        env:
          CRT: ${{ secrets.NGINX_CRT }}
          KEY: ${{ secrets.NGINX_KEY }}
        run: |
          echo "${CRT}" | base64 --decode > nginx-repo.crt
          echo "${KEY}" | base64 --decode > nginx-repo.key
      - name: Fetch N+ AppProtect Certificates
        if: matrix.type == 'plus-ap'
        env:
          CRT: ${{ secrets.NGINX_AP_CRT }}
          KEY: ${{ secrets.NGINX_AP_KEY }}
        run: |
          echo "${CRT}" | base64 --decode > nginx-repo.crt
          echo "${KEY}" | base64 --decode > nginx-repo.key
      - name: Build Test Container
        run: docker build -t test-runner:${{ matrix.tag }} -f tests/docker/Dockerfile .
      - name: Build ${{ matrix.image }} Container
        run: |
          make container BUILD_IN_CONTAINER=1 DOCKERFILEPATH=${{ matrix.path }} \
          DOCKERFILE=${{ matrix.file }} PREFIX=${{ matrix.image }} TAG=${{ matrix.tag }}
      - name: Configure Kubernetes
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.sigs.k8s.io/v1alpha4
          nodes:
            - role: control-plane
            - role: worker
            - role: worker
            - role: worker
          EOF
          cat kind-config.yaml
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --config kind-config.yaml --kubeconfig kube-${{ github.run_id }} --wait ${{ env.K8S_TIMEOUT }}
          kind load docker-image ${{ matrix.image }}:${{ matrix.tag }} --name ${{ github.run_id }}
          echo ::set-output name=cluster_ip::$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${{ github.run_id }}-control-plane)
          echo ::set-output name=cluster::$(echo 'nginx-${{ matrix.type }}-${{ matrix.marker }}')
      - name: Setup Kubeconfig
        run: |
          sed -i 's|server:.*|server: https://${{ steps.k8s.outputs.cluster_ip }}:6443|' kube-${{ github.run_id }}
      - name: Run Smoke Tests
        run: |
          touch tests-${{ steps.k8s.outputs.cluster }}.xml
          docker run --rm \
          --name test-runner-${{ github.run_id }} \
          --network=kind \
          -v ${{ github.workspace }}/tests/tests-${{ steps.k8s.outputs.cluster }}.xml:/workspace/tests/tests-${{ steps.k8s.outputs.cluster }}.xml \
          -v ${{ github.workspace }}/kube-${{ github.run_id }}:/root/.kube/config test-runner:${{ matrix.tag }} \
          --context=kind-${{ github.run_id }} \
          --image=${{ matrix.image }}:${{ matrix.tag }} \
          --image-pull-policy=Never \
          --ic-type=${{ matrix.image }} \
          --service=nodeport --node-ip=${{ steps.k8s.outputs.cluster_ip }} \
          --junitxml=tests-${{ steps.k8s.outputs.cluster }}.xml \
          -m ${{ matrix.marker }}
        working-directory: ./tests
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: test-results-${{ steps.k8s.outputs.cluster }}
          path: ${{ github.workspace }}/tests/tests-${{ steps.k8s.outputs.cluster }}.xml

  helm-tests:
    name: Helm Tests
    runs-on: ${{ matrix.os }}
    needs: [build, binary, unit-tests]
    env:
      NGINX_HTTP_PORT: 32000
      NGINX_HTTPS_PORT: 32001
    # if: 
    #   github.event.pull_request.opened || 
    #   github.event.pull_request.merged
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            path: build
            file: Dockerfile
            image: nginx-ingress
            tag: ${{ github.sha }}
            type: oss
          - os: ubuntu-18.04
            path: build
            file: DockerfileForPlus
            image: nginx-plus-ingress
            tag: ${{ github.sha }}
            type: plus
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Fetch N+ Certificates
        if: matrix.type == 'plus'
        env:
          CRT: ${{ secrets.NGINX_CRT }}
          KEY: ${{ secrets.NGINX_KEY }}
        run: |
          echo "${CRT}" | base64 --decode > nginx-repo.crt
          echo "${KEY}" | base64 --decode > nginx-repo.key
      - name: Build ${{ matrix.image }} Container
        run: |
          make container BUILD_IN_CONTAINER=1 DOCKERFILEPATH=${{ matrix.path }} \
          DOCKERFILE=${{ matrix.file }} PREFIX=${{ matrix.image }} TAG=${{ matrix.tag }}
      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --wait ${{ env.K8S_TIMEOUT }}
          kind load docker-image ${{ matrix.image }}:${{ matrix.tag }} --name ${{ github.run_id }}
      - name: Install Chart
        run: >
          helm install 
          ${{ matrix.type }}
          .
          --set controller.image.repository=${{ matrix.image }}
          --set controller.image.tag=${{ matrix.tag }}
          --set controller.service.type=NodePort
          --set controller.nginxplus=$([[ "${{ matrix.type }}" = "plus" ]] && echo "true" || echo "false")
          --wait
        working-directory: ${{ github.workspace }}/deployments/helm-chart
      - name: Expose Test Ingresses
        run: |
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress 8080:80 &
          kubectl port-forward service/${{ matrix.type }}-nginx-ingress 8443:443 &
      - name: Test HTTP
        run: curl -s http://localhost:8080 | grep -i nginx
      - name: Test HTTPS
        run: curl -ks https://localhost:8443 | grep -i nginx

  release-docker:
    name: Release Images
    runs-on: ${{ matrix.os }}
    needs: [smoke-tests, helm-tests]
    # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    strategy:
      matrix:
        include:
          - os: ubuntu-18.04
            file: build/Dockerfile
            image: nginx-ingress
            tag: edge
          - os: ubuntu-18.04
            file: build/DockerfileForAlpine
            image: nginx-ingress
            tag: edge-alpine
          - os: ubuntu-18.04
            file: build/openshift/Dockerfile
            image: nginx-ingress
            tag: edge-ubi
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Push to Dockerhub
        uses: docker/build-push-action@v1
        with:
          repository: nginx/nginx-ingress
          dockerfile: ${{ matrix.file }}
          path: '.'
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          tag_with_ref: false
          tags: ${{ matrix.tag }}
          push: false

  package-helm:
    name: Package Helm Chart
    runs-on: ubuntu-18.04
    needs: [smoke-tests, helm-tests, release-docker]
    # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Lint
        run: |
          sed -i "s|edge|${{ env.HELM_CHART_VERSION }}|g" deployments/helm-chart/Chart.yaml
          helm lint ${{ env.HELM_CHART_DIR }}
      - name: Package
        run: |
          helm package --version ${{ env.HELM_CHART_VERSION }} ${{ env.HELM_CHART_DIR }}
      - name: Upload Chart
        uses: actions/upload-artifact@v2
        with:
          name: nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz
          path: ${{ github.workspace }}/nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz

  release-helm:
    name: Release Helm Chart
    runs-on: ubuntu-18.04
    needs: [smoke-tests, helm-tests, release-docker, package-helm]
    env:
      GIT_COMMITTER_NAME: NGINX Kubernetes Team
      GIT_COMMITTER_EMAIL: kubernetes@nginx.com
    # if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          repository: nginxinc/helm-charts
          fetch-depth: 1
          token: ${{ secrets.NGINX_PAT }}
      - name: Remove previous Chart
        run: rm -f ${{ github.workspace }}/edge/nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz
      - name: Retrieve latest Helm Chart
        uses: actions/download-artifact@v2
        with:
          name: nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz
          path: ${{ github.workspace }}/edge/nginx-ingress-${{ env.HELM_CHART_VERSION }}.tgz
      - name: Push Helm Chart
        run: |
          helm repo index edge --url https://helm.nginx.com/edge
          ls -la edge/
          git status
          echo git add -A
          echo git commit -m "NGINX Ingress Controller - Edge Release (latest)"
          echo git push -u origin master

  job-failure:
    name: Report Failures
    runs-on: ubuntu-18.04
    if: 
      failure() 
      # github.ref == 'refs/heads/master'
    steps:
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_COLOR: '#3278BD'
          SLACK_ICON_EMOJI: ':github:'
          SLACK_TITLE: Pipeline Failure
          SLACK_MESSAGE: 'The pipeline has failed, please check the logs.'
          SLACK_FOOTER: 'https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          SLACK_USERNAME: GitHub-Actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_HOOK }}